<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Daan Leijen</string>
	<key>fileTypes</key>
	<array>
		<string>kk</string>
		<string>kki</string>
		<string>core</string>
	</array>
	<key>firstLineMatch</key>
	<string>\s*(module)\s*((interface)?)\s*(([a-z][\w\-]*/)*[a-z][\w\-]*)</string>
	<key>foldingStartMarker</key>
	<string>{\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*}</string>
	<key>name</key>
	<string>koka</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#line_comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#line_directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block_comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#rawstring</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#rawstring1</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#rawstring2</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#character</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#characteresc</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type_app</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#top_type</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#top_type_type</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#top_type_alias</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#top_type_struct_args</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#top_type_struct</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#top_type_quantifier</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#decl_function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#decl_external_import</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#decl_external</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#decl_val</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#decl_var</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#decl_param</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#module_id</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#import_id</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#import_id2</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#branch</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#dot</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#reservedid</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#reservedcontrol</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#reservedop</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#libraryid</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#externid</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#qconstructor</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#qoperator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#qidentifier</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#identifier</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#constructor</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#special</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#minus</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#wildcard</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#number</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#inv_character</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#whitespace</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>block_comment</key>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment koka.comment.block</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment koka.comment.block</string>
				</dict>
			</dict>
			<key>name</key>
			<string>comment.block koka.comment.block</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^```+.*$</string>
					<key>end</key>
					<string>^```+\s*$</string>
					<key>name</key>
					<string>koka.comment.doc.pre.block</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.pre.type</string>
						</dict>
					</dict>
					<key>match</key>
					<string>`(:[^\`\n]+)`</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.pre.module</string>
						</dict>
					</dict>
					<key>match</key>
					<string>`(module [^\`\n]+)`</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.pre.source</string>
						</dict>
					</dict>
					<key>match</key>
					<string>`+([^\`\n]*)`+</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.emph</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\*([^\*]*)\*</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>markup.italic koka.comment.doc.emph</string>
						</dict>
					</dict>
					<key>match</key>
					<string>_([^_]*)_</string>
				</dict>
			</array>
		</dict>
		<key>branch</key>
		<dict>
			<key>match</key>
			<string>(finally|initially)\s*(?=-&gt;|[\{\(])</string>
			<key>name</key>
			<string>keyword.other koka.id.library.$1</string>
		</dict>
		<key>character</key>
		<dict>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.character koka.char</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.character koka.char</string>
				</dict>
			</dict>
			<key>match</key>
			<string>'[^\'\\$]'</string>
			<key>name</key>
			<string>string.quoted.single koka.char</string>
		</dict>
		<key>characteresc</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single koka.char</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single constant.character.escape koka.char.escape</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single constant.character.escape koka.char.escape</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single koka.char</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(')(\\([abfnrtv0\\"'\?]|x[\da-fA-F]{2}|u[\da-fA-F]{4}|U[\da-fA-F]{6}))(')</string>
		</dict>
		<key>constructor</key>
		<dict>
			<key>match</key>
			<string>[A-Z][\w\-]*[\'\?]*|\(,+\)</string>
			<key>name</key>
			<string>entity.name.tag.css.constant.other.constructor koka.conid</string>
		</dict>
		<key>decl_external</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.function koka.keyword.extern</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function koka.id.decl.function</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:inline|noinline)?\s*extern)\s+([\.a-z][\w\-]*[\'\?]*(?:\.\d+)?|\([$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;]+(?:\.\d+)?\)|\[\]|\"[^\s\"]+\")?</string>
		</dict>
		<key>decl_external_import</key>
		<dict>
			<key>match</key>
			<string>(extern\s+import)</string>
			<key>name</key>
			<string>keyword.declaration.import koka.keyword.extern</string>
		</dict>
		<key>decl_function</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.function koka.keyword.fun</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function koka.id.decl.function</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:inline|noinline)?\s*(?:fun|fn|ctl|ret))\s+([\.a-z][\w\-]*[\'\?]*(?:\.\d+)?|\([$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;]+(?:\.\d+)?\)|\[\]|\"[^\s\"]+\")</string>
		</dict>
		<key>decl_param</key>
		<dict>
			<key>match</key>
			<string>([a-z][\w\-]*[\'\?]*)\s*(?=:)</string>
			<key>name</key>
			<string>entity.name koka.id.param</string>
		</dict>
		<key>decl_val</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration  koka.keyword.val</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name koka.id.decl.val</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:inline|noinline)?\s*val)\s+([\.a-z][\w\-]*[\'\?]*(?:\.\d+)?|\([$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;]+(?:\.\d+)?\))?</string>
		</dict>
		<key>decl_var</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration koka.keyword.var</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name koka.id.decl.var</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(var)\s+([a-z][\w\-]*[\'\?]*|\([$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;]+\))</string>
		</dict>
		<key>dot</key>
		<dict>
			<key>match</key>
			<string>\.</string>
			<key>name</key>
			<string>source.dot koka.special.dot</string>
		</dict>
		<key>externid</key>
		<dict>
			<key>match</key>
			<string>(?:c|cs|js|inline)\s+(?:inline\s+)?(?:(?:file|header-file|header-end-file)\s+)?(?=[\"\{]|r#*")</string>
			<key>name</key>
			<string>keyword.control koka.id.extern.$1</string>
		</dict>
		<key>fun_parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#param_identifier</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[,]</string>
					<key>name</key>
					<string>punctuation.separator koka.special</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#top_type</string>
				</dict>
			</array>
		</dict>
		<key>identifier</key>
		<dict>
			<key>match</key>
			<string>[a-z][\w\-]*[\'\?]*(?:\.\d+)?</string>
			<key>name</key>
			<string>source koka.id</string>
		</dict>
		<key>import_id</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword koka.keyword.import</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.other.member.definition.module koka.moduleid</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>keyword koka.keyword.op</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>variable.other.member.definition.module koka.moduleid</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(import)(\s+(([a-z][\w\-]*/)*[a-z][\w\-]*)(\s+(=)(\s+(([a-z][\w\-]*/)*[a-z][\w\-]*))?))</string>
		</dict>
		<key>import_id2</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword koka.keyword.import</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.other.member.definition.module koka.moduleid</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(import)(\s+(([a-z][\w\-]*/)*[a-z][\w\-]*))</string>
		</dict>
		<key>inv_character</key>
		<dict>
			<key>match</key>
			<string>'([^'\\\n]|\\(.|x..|u....|U......))'|'$|''?</string>
			<key>name</key>
			<string>invalid.string.quoted.single koka.char.invalid</string>
		</dict>
		<key>libraryid</key>
		<dict>
			<key>match</key>
			<string>(resume|resume-shallow|rcontext)(?![\w\-?'])</string>
			<key>name</key>
			<string>keyword.control koka.id.library.$1</string>
		</dict>
		<key>libraryop</key>
		<dict>
			<key>match</key>
			<string>(!)(?![$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;])</string>
			<key>name</key>
			<string>keyword.control koka.op.library</string>
		</dict>
		<key>line_comment</key>
		<dict>
			<key>begin</key>
			<string>//</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment  koka.comment.line</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.line.double-slash koka.comment.line</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.pre.type</string>
						</dict>
					</dict>
					<key>match</key>
					<string>`(:[^\`\n]+)`</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.pre.module</string>
						</dict>
					</dict>
					<key>match</key>
					<string>`(module [^\`\n]+)`</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.pre.source</string>
						</dict>
					</dict>
					<key>match</key>
					<string>`+([^\`\n]*)`+</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>koka.comment.doc.emph</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\*([^\*]*)\*</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>markup.italic koka.comment.doc.emph</string>
						</dict>
					</dict>
					<key>match</key>
					<string>_([^_]*)_</string>
				</dict>
			</array>
		</dict>
		<key>line_directive</key>
		<dict>
			<key>match</key>
			<string>^\s*#.*$</string>
			<key>name</key>
			<string>meta.preprocessor koka.preprocessor</string>
		</dict>
		<key>minus</key>
		<dict>
			<key>match</key>
			<string>-(?![$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;])</string>
			<key>name</key>
			<string>source.operator.minus koka.op.minus</string>
		</dict>
		<key>module_id</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other koka.keyword.module</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other koka.keyword.interface</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>variable.other.member.definition.module koka.moduleid</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(module)\s*((interface)?)\s*(([a-z][\w\-]*/)*[a-z][\w\-]*)</string>
		</dict>
		<key>number</key>
		<dict>
			<key>match</key>
			<string>-?(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*(\.[\da-fA-F]+(?:_[\da-fA-F]+)*)?([pP][\-+]?\d+)?|(?:0|[1-9]\d*)(?:_\d+)*(\.\d+(?:_\d+)*([eE][\-+]?\d+)?)?)</string>
			<key>name</key>
			<string>constant.numeric koka.number</string>
		</dict>
		<key>operator</key>
		<dict>
			<key>match</key>
			<string>[$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;]+</string>
			<key>name</key>
			<string>source.operator koka.op</string>
		</dict>
		<key>param_identifier</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function koka.id.param</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>koka.keyword.borrow</string>
				</dict>
			</dict>
			<key>match</key>
			<string>([^]\s+)?([a-z][\w\-]*[\'\?]*)\s*(?=[:,\)])</string>
		</dict>
		<key>qconstructor</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.member.definition.module koka.moduleid</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.css.constant.other.constructor koka.conid</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:[a-z][\w\-]*/)+)([A-Z][\w\-]*[\'\?]*)</string>
		</dict>
		<key>qidentifier</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.member.definition.module koka.moduleid</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>source koka.id</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:[a-z][\w\-]*/)+)([\.a-z][\w\-]*[\'\?]*(?:\.\d+)?)</string>
		</dict>
		<key>qoperator</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.member.definition.module koka.moduleid</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>source.operator koka.op</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:[a-z][\w\-]*/)+)(\([^\n\r\)]+(?:\.\d+)?\))</string>
		</dict>
		<key>rawstring</key>
		<dict>
			<key>begin</key>
			<string>r"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double koka.string.raw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[^"]+</string>
					<key>name</key>
					<string>string.quoted.double koka.string.raw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>invalid.string.quoted.double koka.string.raw</string>
				</dict>
			</array>
		</dict>
		<key>rawstring1</key>
		<dict>
			<key>begin</key>
			<string>r#"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"#</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double koka.string.raw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[^"]+</string>
					<key>name</key>
					<string>string.quoted.double koka.string.raw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>"(?!#)</string>
					<key>name</key>
					<string>string.quoted.double koka.string.raw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>invalid.string.quoted.double koka.string.raw</string>
				</dict>
			</array>
		</dict>
		<key>rawstring2</key>
		<dict>
			<key>begin</key>
			<string>r##"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"##</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double koka.string.raw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[^"]+</string>
					<key>name</key>
					<string>string.quoted.double koka.string.raw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>"(?!##)</string>
					<key>name</key>
					<string>string.quoted.double koka.string.raw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>invalid.string.quoted.double koka.string.raw</string>
				</dict>
			</array>
		</dict>
		<key>reservedcontrol</key>
		<dict>
			<key>match</key>
			<string>(if|then|else|elif|match|return)(?![\w\-?'])</string>
			<key>name</key>
			<string>keyword.control koka.keyword.control.$1</string>
		</dict>
		<key>reservedid</key>
		<dict>
			<key>match</key>
			<string>(return(?=(?:\(|\s+\(?)\w[\w\-]*\s*(?:\)\s*(?:[^;])))|infix|infixr|infixl|type|co|rec|struct|alias|forall|exists|some|extern|fun(?:\s+raw)?|fn|val|var|con|with(?:\s+override)?|module|import|as|in|pub|abstract|effect|named|raw|final|ctl|break|context|mask(?:\s+behind)?|handle|handler)(?![\w\-?'])</string>
			<key>name</key>
			<string>keyword.other koka.keyword</string>
		</dict>
		<key>reservedop</key>
		<dict>
			<key>match</key>
			<string>(=|=&gt;|\-&gt;|&lt;\-|\||\.|:|:=)(?![$%&amp;\*\+@!/\\\^~=\.:\-\?\|&lt;&gt;])</string>
			<key>name</key>
			<string>keyword koka.keyword.op</string>
		</dict>
		<key>special</key>
		<dict>
			<key>match</key>
			<string>[{}\(\)\[\];,]</string>
			<key>name</key>
			<string>punctuation.separator koka.special</string>
		</dict>
		<key>string</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"|$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string koka.string</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double koka.string</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([^"\\]|\\.)+$</string>
					<key>name</key>
					<string>invalid.string.quoted.double koka.string.invalid</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[^"\\]+</string>
					<key>name</key>
					<string>string.quoted.double.regular koka.string</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([abfnrtvz0\\"'\?]|x[\da-fA-F]{2}|u[\da-fA-F]{4}|U[\da-fA-F]{6})</string>
					<key>name</key>
					<string>string.quoted.double constant.character.escape koka.string.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>invalid.string.quoted.double koka.string</string>
				</dict>
			</array>
		</dict>
		<key>top_type</key>
		<dict>
			<key>begin</key>
			<string>(:(?![$%&amp;\*\+@!\\\^~=\.:\-\|&lt;&gt;]))|(where|iff|when)(?![\w\-])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword koka.keyword.$2</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[,\)\{\}\[\]=;"`A-Z]|  |(infix|infixr|infixl|inline|noinline|value|reference|open|extend|rec|co|type|linear|effect|context|ambient|alias|extern|fn|fun|function|val|raw|final|ctl|var|con|if|then|else|elif|match|inject|mask|named|handle|handler|return|module|import|as|pub|abstract)(?![\w\-?']))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>invalid.keyword koka.invalid</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_content_top</string>
				</dict>
			</array>
		</dict>
		<key>top_type_alias</key>
		<dict>
			<key>begin</key>
			<string>(alias)\s+([a-z][\w\-]+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration koka.keyword</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.typecon</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[,\)\{\}\[\];"`A-Z]|(infix|infixr|infixl|inline|noinline|type|co|rec|linear|alias|effect|context|ambient|extern|fn|fun|function|val|var|con|if|then|else|elif|match|inject|mask|named|handle|handler|return|module|import|as|pub|abstract)(?![\w\-?']))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>invalid.keyword koka.keyword.invalid</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>=</string>
					<key>name</key>
					<string>keyword.other koka.keyword.op</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_content_top</string>
				</dict>
			</array>
		</dict>
		<key>top_type_quantifier</key>
		<dict>
			<key>begin</key>
			<string>(exists|forall|some)(\s*)(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword koka.keyword</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)|(?=[\)\{\}\[\]=;"`]|(infix|infixr|infixl|inline|noinline|type|co|rec|effect|context|ambient|alias|extern|fn|fun|function|val|var|con|if|then|else|elif|match|inject|mask|named|handle|handler|return|module|import|as|pub|abstract)(?![\w\-?']))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.keyword koka.keyword.invalid</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_content</string>
				</dict>
			</array>
		</dict>
		<key>top_type_struct</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration koka.keyword.struct</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.typecon</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(struct)\s+([a-z][\w\-]*|\(,*\))</string>
		</dict>
		<key>top_type_struct_args</key>
		<dict>
			<key>begin</key>
			<string>(struct)\s+([a-z][\w\-]*|\(,*\))\s*(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration koka.keyword.struct</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.typecon</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)|(?=[\)\{\}\[\]=;"`]|(infix|infixr|infixl|inline|noinline|type|co|rec|effect|context|ambient|alias|extern|fn|fun|function|val|var|con|if|then|else|elif|match|inject|mask|named|handle|handler|return|module|import|as|pub|abstract)(?![\w\-?']))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.keyword koka.keyword.invalid</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_content</string>
				</dict>
			</array>
		</dict>
		<key>top_type_type</key>
		<dict>
			<key>begin</key>
			<string>((?:(?:value|reference|open|extend|rec|co)?\s*type)|(?:named\s+)?(?:scoped\s+)?(?:linear\s+)?(?:rec\s+)?(?:effect|context|ambient))\s+(?!fn|fun|val|raw|final|ctl|ret)([a-z][\w\-]+|&lt;&gt;|&lt;\|&gt;|\(,*\))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.type koka.keyword</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.typecon</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[\)\{\}\[\]=;"`A-Z]|  [\r\n]|(infix|infixr|infixl|inline|noinline|type|co|rec|effect|context|ambient|alias|extern|fn|fun|function|val|var|raw|final|ctl|con|if|then|else|elif|match|inject|mask|named|handle|handler|return|module|import|as|pub|abstract|value|reference|open|extend|inline|noinline)(?![\w\-?']))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator koka.special</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_content_top</string>
				</dict>
			</array>
		</dict>
		<key>type_app</key>
		<dict>
			<key>begin</key>
			<string>&lt;(?![$%&amp;\*\+@!/\\\^~=\.:\-\?\|\s\d])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&gt;|\n|  </string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
			</dict>
			<key>name</key>
			<string>constant.numeric.type support.type koka.type.special</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_content</string>
				</dict>
			</array>
		</dict>
		<key>type_content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_content_top</string>
				</dict>
			</array>
		</dict>
		<key>type_content_top</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(forall|exists|some|with|in|iff|when|is|if)(?![\w\-])</string>
					<key>name</key>
					<string>keyword.other koka.keyword.$1</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-&gt;|::?|\.)(?![$%&amp;\*\+@!\\\^~=\.:\-\?\|&lt;&gt;])</string>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_qidentifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_identifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_kind</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.type support.type koka.type.special</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.type support.type koka.type.special</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.parens</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type_content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;(?![$%&amp;\*\+@!/\\\^~=\.:\-\?\|])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.type support.type koka.type.special</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;|\n|  </string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.type support.type koka.type.special</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type_content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.type support.type koka.type.special</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.type support.type koka.type.special</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type_content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#line_comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[;,]|:</string>
					<key>name</key>
					<string>constant.numeric.type support.type koka.type.special</string>
				</dict>
			</array>
		</dict>
		<key>type_identifier</key>
		<dict>
			<key>match</key>
			<string>[a-z][\w\-]*[\'\?]*</string>
			<key>name</key>
			<string>constant.numeric.type support.type koka.type.typecon</string>
		</dict>
		<key>type_kind</key>
		<dict>
			<key>match</key>
			<string>[A-Z](?![\w\-])</string>
			<key>name</key>
			<string>constant.numeric.type support.type koka.type.kind</string>
		</dict>
		<key>type_parameter</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>source.typeparam koka.type.typeparam</string>
				</dict>
			</dict>
			<key>match</key>
			<string>([a-zA-Z][\w\-]*[\'\?]*)\s*:(?!:)</string>
		</dict>
		<key>type_qidentifier</key>
		<dict>
			<key>match</key>
			<string>([a-z][\w\-]*[\'\?]*/)+</string>
			<key>name</key>
			<string>variable.other.member.definition.module koka.moduleid</string>
		</dict>
		<key>type_variable</key>
		<dict>
			<key>match</key>
			<string>([a-z][0-9]*|_[\w\-]*[\'\?]*|self)(?!\w)</string>
			<key>name</key>
			<string>markup.italic constant.numeric.type support.type koka.type.typevar</string>
		</dict>
		<key>whitespace</key>
		<dict>
			<key>match</key>
			<string>[ \t]+</string>
			<key>name</key>
			<string>source koka.white</string>
		</dict>
		<key>wildcard</key>
		<dict>
			<key>match</key>
			<string>_[\w\-]*[\'\?]*</string>
			<key>name</key>
			<string>source.wildcard koka.id.wildcard</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.koka</string>
	<key>uuid</key>
	<string>c987c4f0-a938-47e3-a371-13d6c7542ed3</string>
</dict>
</plist>
